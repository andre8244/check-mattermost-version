#!/bin/bash

vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

# Mattermost upstream version

# /// retrieve first 5 restults, some could be RC
upstream_version=$(curl -s "https://api.github.com/repos/mattermost/mattermost-server/releases" | jq -r '.[0].tag_name' | sed -E 's/v//g')

token=$(cat token.txt)

# Nethserver Mattermost version

# author: nethbot
# nethserver_version=$(curl -sH "Authorization: token $token" "https://api.github.com/search/issues?q=mattermost+in:title+repo:nethserver/dev+author:gsanchietti&sort=created" | jq -r '.items[0].title' | sed -E 's/^.+\s(.+)$/\1/')
nethserver_version=$(curl -sH "Authorization: token $token" "https://api.github.com/search/issues?q=mattermost+in:title+repo:nethserver/dev&sort=created" | jq -r '.items[0].title' | sed -E 's/^.+\s(.+)$/\1/')

echo upstream "$upstream_version"  nethserver "$nethserver_version"

# instead of comparing version it's enough to check their equality

if [ "$upstream_version" != "$nethserver_version" ]; then
    echo different
    exit 0
else
    echo same
    exit 0
fi

# create an issue if upstream version is higher

# add changelog in body ////
url_issue=$(curl -s -u "andre8244@gmail.com" -d "{\"title\":\"Mattermost $upstream_version\", \"body\":\"Update Mattermost release to $upstream_version.\"}" "https://api.github.com/repos/andre8244/check-mattermost-version/issues" | jq -r '.html_url')

echo url "$url_issue" # ////

# Retrieve master branch sha
master_sha=$(curl -s "https://api.github.com/repos/andre8244/check-mattermost-version/git/ref/heads/master" | jq -r '.object.sha')

# Create remote branch
curl -s -u "andre8244@gmail.com" -X POST -d "{\"ref\":\"refs/heads/update-version-$upstream_version\", \"sha\":\"$master_sha\"}" "https://api.github.com/repos/andre8244/check-mattermost-version/git/refs"

# Clone remote branch without checking out files
git clone -b update-version-$upstream_version -n "https://github.com/andre8244/check-mattermost-version.git" --depth 1

cd check-mattermost-version

# Unstage deletion of all files
git reset HEAD

# Checkout spec file
git checkout README.md

# Escape point in upstream version
upstream_version_escaped=$(echo $upstream_version | sed -E 's/\./\\./g')

# Replace version in spec
sed -Ei "s/%define mattermost_release .+$/%define mattermost_release $upstream_version_escaped/" README.md

git add README.md

git commit -m "Update to $upstream_version"

# //// come passare il token al comando push?
git push -u origin update-version-$upstream_version

# Create pull request
curl -s -u "andre8244@gmail.com" -d "{\"title\":\"Update to $upstream_version\", \"body\":\"$url_issue\", 
        \"head\": \"update-version-$upstream_version\", \"base\": \"master\"}" "https://api.github.com/repos/andre8244/check-mattermost-version/pulls"

echo "Done"
